function Invoke-KeyCardCreator {
    <#
    .SYNOPSIS
        Starts the interactable Key Card Creator.
        
    .DESCRIPTION
        Starts the interactable Key Card Creator. This machine lets you create a yellow or red key card.
    #>

    # Import machine data from file.
    $InteractableData = Get-Content "$PSScriptRoot\KeyCardCreator.json" | ConvertFrom-Json -AsHashtable
    
    # Write header to screen.
    Show-Header

    # Write map to screen, if enabled.
    if ($MapStyle) {
        Show-Map -MapStyle $MapStyle
    }
    
    # Write previous action to screen, if any.
    if ($ActionMessage) {
        Write-WordWrapHost $ActionMessage -Color Green
        if (!$CompletedAchievement) { Write-Host } # Skip this empty line when an achievement is completed, it looks better that way.
    }
    # Write room title to screen.
    Write-Host "[$($World."$($State.CurrentRoom)".RoomTitle)]" -BackgroundColor White -ForegroundColor Black
    Write-Host
    
    # Write room description to screen.
    Write-WordWrapHost "$($World."$($State.CurrentRoom)".RoomDescription)"

    # Write exits to screen.
    Show-Exits

    # Take inventory of all the options at the beer crate rack.
    $KeyCardCreatorOptions = @{}
    $i = 1
    foreach ($Option in $InteractableData.Keys) {
        $KeyCardCreatorOptions.$i = $InteractableData.$Option
        $i++
    }

    # Write interactable specific actions to screen.
    Write-WordWrapHost "So... what now?" -Color Magenta
    Write-Host

    foreach ($Number in $KeyCardCreatorOptions.Keys | Sort-Object) {
        Write-Host "$Number`: $($KeyCardCreatorOptions.$Number.MenuDescription)"
    }
    write-host

    # Read player action.
    $PlayerInput = $null
    while (('1','2','3','4','5','6','7','8','9') -notcontains $PlayerInput) {
        $PlayerInput = Read-Host "What would you like to do?"
    }
    [int]$PlayerInput = $PlayerInput

    # Process player action.
    if ((@(1..9) -contains $PlayerInput -and $PlayerInput -le $KeyCardCreatorOptions.Count)) {
        if ($KeyCardCreatorOptions.$PlayerInput.MenuDescription -eq "Choose 'Copy a key card'.") {
            $Script:ActionMessage = $KeyCardCreatorOptions.$PlayerInput.ActionMessage
            $Script:MachineState = "Completed"
        }
        elseif ($KeyCardCreatorOptions.$PlayerInput.MenuDescription -eq "Choose 'Create a key card'.") {
            if ($State.Inventory -contains "A red key card") {
                $Script:ActionMessage = "You create a red key card, but you already have one. You destroy the evidence by putting the duplicate in the bin."
            }
            else {
                $Script:ActionMessage = $KeyCardCreatorOptions.$PlayerInput.ActionMessage
                $State.Inventory += "A red key card"
            }
            $Script:MachineState = "Completed"
        } 
        else {
            # If this gets triggered, figure out why TODO: remove before final version
            Write-Host "You shouldn't get here" -ForegroundColor Red
            pause
        }
    }

    else {
        $Script:ActionMessage = "Invalid choice. Try again"
        $Script:MachineState = "Running"
    }
}
