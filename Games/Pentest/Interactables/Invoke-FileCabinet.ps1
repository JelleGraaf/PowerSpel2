function Invoke-FileCabinet {
    <#
    .SYNOPSIS
        Starts the interactable File Cabinet.
        
    .DESCRIPTION
        Starts the interactable File Cabinet. It allows the player to interact with an HR file cabinet, which might contain some sensitive data.
    #>

    # Import machine data from file.
    $InteractableData = Get-Content "$PSScriptRoot\FileCabinet.json" | ConvertFrom-Json -AsHashtable

    if (!$Script:FileCabinetAttemptCounter) {
        # Initialize AttemptCounter, if it hasn't yet.
        $Script:FileCabinetAttemptCounter = 0
    }
    $Script:MachineState = "Running"
    while ($Script:MachineState -eq "Running") {

        # Write header to screen.
        Show-Header

        # Write map to screen, if enabled.
        if ($MapStyle) {
            Show-Map -MapStyle $MapStyle
        }
    
        # Write previous action to screen, if any.
        if ($ActionMessage) {
            Write-WordWrapHost $ActionMessage -Color Green
            if (!$CompletedAchievement) { Write-Host } # Skip this empty line when an achievement is completed, it looks better that way.
        }
        # Write room title to screen.
        Write-Host "[$($World."$($State.CurrentRoom)".RoomTitle)]" -BackgroundColor White -ForegroundColor Black
        Write-Host
    
        # Write room description to screen.
        Write-WordWrapHost "$($World."$($State.CurrentRoom)".RoomDescription)"

        # Write exits to screen.
        Show-Exits

        # Take inventory of all the options at the file cabinet.
        $FileCabinetOptions = @{}
        $i = 1
        foreach ($Option in $InteractableData.Keys) {
            $FileCabinetOptions.$i = $InteractableData.$Option
            $i++
        }

        # Write interactable specific actions to screen.
        Write-WordWrapHost "So... what now?" -Color Magenta
        Write-Host

        foreach ($Number in $FileCabinetOptions.Keys | Sort-Object) {
            Write-Host "$Number`: $($FileCabinetOptions.$Number.MenuDescription)"
        }
        Write-Host

        # Read player action.
        $PlayerInput = $null
        while (('1', '2', '3', '4', '5', '6', '7', '8', '9') -notcontains $PlayerInput) {
            $PlayerInput = Read-Host "What would you like to do?"
        }
        [int]$PlayerInput = $PlayerInput

        # Process player action.
        if ((@(1..9) -contains $PlayerInput -and $PlayerInput -le $FileCabinetOptions.Count)) {
            if ($FileCabinetOptions.$PlayerInput.MenuDescription -eq "Open the drawer labeled A-H.") {
                $Script:ActionMessage = $FileCabinetOptions.$PlayerInput.ActionMessage
                $State.inventory += "Jan Jansens personnel file"
                $Script:FileCabinetAttemptCounter++
                $interactableData.Remove("DrawerAH")
                $Script:MachineState = "Running"
            }
            elseif ($FileCabinetOptions.$PlayerInput.MenuDescription -eq "Open the drawer labeled I-P.") {
                $Script:ActionMessage = $FileCabinetOptions.$PlayerInput.ActionMessage
                $State.inventory += "Piet Pietersens personnel file"
                $Script:FileCabinetAttemptCounter++
                $interactableData.Remove("DrawerIP")
                $Script:MachineState = "Running"
            }
            elseif ($FileCabinetOptions.$PlayerInput.MenuDescription -eq "Open the drawer labeled Q-Z.") {
                $Script:ActionMessage = $FileCabinetOptions.$PlayerInput.ActionMessage
                $State.inventory += "Sipke Sipkema's personnel file"
                $Script:FileCabinetAttemptCounter++
                $interactableData.Remove("DrawerQZ")
                $Script:MachineState = "Running"
            }
            elseif ($FileCabinetOptions.$PlayerInput.MenuDescription -eq "Walk away from the file cabinet.") {
                $Script:ActionMessage = $FileCabinetOptions.$PlayerInput.ActionMessage
                $Script:MachineState = "Completed"
            }
        }
        else {
            $Script:ActionMessage = "Invalid choice. Try again"
            $Script:MachineState = "Running"
        }

        # End the game if the player spends too much time at the PC.
        if ($Script:FileCabinetAttemptCounter -ge 2) {
            Write-wordwrapHost "Someone spots you, nosing in the drawers, where you shouldn't. This is probably the end of your assignment..." -Color Green
            Start-Sleep -Seconds 5
            $Script:MachineState = "Completed"
            $Script:EndScenario = "Caught"
            $Script:GameState = "Quit"
        }

        # Check for completed exploits while inside the interactable, to show it straight away.
        Invoke-ExploitCheck
    }
}