function Invoke-AircoControls {
    <#
    .SYNOPSIS
        Starts the interactable Airco Controls.
        
    .DESCRIPTION
        Starts the interactable Airco Controls. It allows the player to interact with the central airco controls and mess around with it..
    #>

    # Import machine data from file.
    $InteractableData = Get-Content "$PSScriptRoot\AircoControls.json" | ConvertFrom-Json -AsHashtable

    if ($Script:State.NetworkDistraction -eq $true) {
        # With the distraction of the network being down, the player has a few attempts at the PC.
        $AttemptCounter = 0
    }
    else {
        # With no distraction going on, the player will get caught snooping on the PC right away.
        $AttemptCounter = 2
    }
    $Script:MachineState = "Running"
    $AircoState = 'On'
    while ($Script:MachineState -eq "Running") {

        # Write header to screen.
        Show-Header

        # Write map to screen, if enabled.
        if ($MapStyle) {
            Show-Map -MapStyle $MapStyle
        }
    
        # Write previous action to screen, if any.
        if ($ActionMessage) {
            Write-WordWrapHost $ActionMessage -Color Green
            if (!$CompletedAchievement) { Write-Host } # Skip this empty line when an achievement is completed, it looks better that way.
        }
        # Write room title to screen.
        Write-Host "[$($World."$($State.CurrentRoom)".RoomTitle)]" -BackgroundColor White -ForegroundColor Black
        Write-Host
    
        # Write room description to screen.
        Write-WordWrapHost "$($World."$($State.CurrentRoom)".RoomDescription)"

        # Write exits to screen.
        Show-Exits

        # Take inventory of all the options at the airco controls.
        $AircoControlsOptions = @{}
        $i = 1
        foreach ($Option in $InteractableData.Keys) {
            $AircoControlsOptions.$i = $InteractableData.$Option
            $i++
        }

        # Write interactable specific actions to screen.
        Write-WordWrapHost "So... what now?" -Color Magenta
        Write-Host

        foreach ($Number in $AircoControlsOptions.Keys | Sort-Object) {
            Write-Host "$Number`: $($AircoControlsOptions.$Number.MenuDescription)"
        }
        Write-Host

        # Read player action.
        $PlayerInput = $null
        while (('1', '2', '3', '4', '5', '6', '7', '8', '9') -notcontains $PlayerInput) {
            $PlayerInput = Read-Host "What would you like to do?"
        }
        [int]$PlayerInput = $PlayerInput

        # Process player action.
        if ((@(1..9) -contains $PlayerInput -and $PlayerInput -le $AircoControlsOptions.Count)) {
            if ($AircoControlsOptions.$PlayerInput.MenuDescription -eq "Turn off the airco.") {
                if ($AircoState -eq 'off') {
                    $Script:ActionMessage = "The airo is already off, dummy. This does nothing."
                }
                else {
                    $Script:ActionMessage = $AircoControlsOptions.$PlayerInput.ActionMessage
                }
                $AircoState = 'Off'
                # Add turn on option
                $Script:MachineState = "Running"
            }
            elseif ($AircoControlsOptions.$PlayerInput.MenuDescription -eq "Turn on the airco.") {
                if ($AircoState -eq 'On') {
                    $Script:ActionMessage = "The airo is already on, dummy. This does nothing."
                }
                else {
                    $Script:ActionMessage = $AircoControlsOptions.$PlayerInput.ActionMessage
                }
                $AircoState = 'On'
                # Add turn off option
                $Script:MachineState = "Running"
            }
            elseif ($AircoControlsOptions.$PlayerInput.MenuDescription -eq "Fiddle around with the control buttons.") {
                $Script:ActionMessage = $AircoControlsOptions.$PlayerInput.ActionMessage
                $interactableData.Remove("AdjustControls")
                $Script:MachineState = "Running"
            }
            elseif ($AircoControlsOptions.$PlayerInput.MenuDescription -eq "Place a smoke capsule in the ventilation shaft and activate it.") {
                $Script:ActionMessage = $AircoControlsOptions.$PlayerInput.ActionMessage
                $interactableData.Remove("SmokeCapsule")
                $Script:State.Smoke = $true
                $Script:MachineState = "Running"
            }
            elseif ($AircoControlsOptions.$PlayerInput.MenuDescription -eq "Step away from the controls.") {
                $Script:ActionMessage = $AircoControlsOptions.$PlayerInput.ActionMessage
                $interactableData.Remove("StepAway")
                $Script:MachineState = "Completed"
            }
        }
        else {
            $Script:ActionMessage = "Invalid choice. Try again"
            $Script:MachineState = "Running"
        }

        # End the game if the player spends too much time at the PC.
        if ($AttemptCounter -ge 3) {
            Write-wordwrapHost "Someone looks up at you, realizes what you are doing and calls you out! This is probably the end of your assignment..." -Color Green
            Start-Sleep -Seconds 5
            $Script:MachineState = "Completed"
            $Script:EndScenario = "Caught"
            $Script:GameState = "Quit"
        }
    }
}