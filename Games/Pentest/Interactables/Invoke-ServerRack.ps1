function Invoke-ServerRack {
    <#
    .SYNOPSIS
        Starts the interactable Server Rack.
        
    .DESCRIPTION
        Starts the interactable Server Rack. It offers the player some options to possibly progress on their quest to probe and break the security.
    #>

    # Import machine data from file.
    $InteractableData = Get-Content "$PSScriptRoot\ServerRack.json" | ConvertFrom-Json -AsHashtable
    
    $Script:MachineState = "Running"
    while ($Script:MachineState -eq "Running") {

        # Write header to screen.
        Show-Header

        # Write map to screen, if enabled.
        if ($MapStyle) {
            Show-Map -MapStyle $MapStyle
        }
    
        # Write previous action to screen, if any.
        if ($ActionMessage) {
            Write-WordWrapHost $ActionMessage -Color Green
            if (!$CompletedAchievement) { Write-Host } # Skip this empty line when an achievement is completed, it looks better that way.
        }
        # Write room title to screen.
        Write-Host "[$($World."$($State.CurrentRoom)".RoomTitle)]" -BackgroundColor White -ForegroundColor Black
        Write-Host
    
        # Write room description to screen.
        Write-WordWrapHost "$($World."$($State.CurrentRoom)".RoomDescription)"

        # Write exits to screen.
        Show-Exits

        # Take inventory of all the options at the server rack.
        $ServerRackOptions = @{}
        $i = 1
        foreach ($Option in $InteractableData.Keys) {
            $ServerRackOptions.$i = $InteractableData.$Option
            $i++
        }

        # Write interactable specific actions to screen.
        Write-WordWrapHost "So... what now?" -Color Magenta
        Write-Host

        foreach ($Number in $ServerRackOptions.Keys | Sort-Object) {
            Write-Host "$Number`: $($ServerRackOptions.$Number.MenuDescription)"
        }
        Write-Host

        # Read player action.
        $PlayerInput = $null
        while (('1', '2', '3', '4', '5', '6', '7', '8', '9') -notcontains $PlayerInput) {
            $PlayerInput = Read-Host "What would you like to do?"
        }
        [int]$PlayerInput = $PlayerInput

        # Process player action.
        if ((@(1..9) -contains $PlayerInput -and $PlayerInput -le $ServerRackOptions.Count)) {
            if ($ServerRackOptions.$PlayerInput.MenuDescription -eq "Turn off a server.") {
                $Script:ActionMessage = $ServerRackOptions.$PlayerInput.ActionMessage
                $interactableData.Remove("TurnOffServer")
                $Script:MachineState = "Running"
            }
            elseif ($ServerRackOptions.$PlayerInput.MenuDescription -eq "See if you can log on to a server.") {
                $Script:ActionMessage = $ServerRackOptions.$PlayerInput.ActionMessage
                $interactableData.Remove("TryLogOn")
                $Script:MachineState = "Running"
            }
            elseif ($ServerRackOptions.$PlayerInput.MenuDescription -eq "Pull some random cables from a switch.") {
                $Script:ActionMessage = $ServerRackOptions.$PlayerInput.ActionMessage
                $World.'515351'.RoomDescription = "Workspaces, six of them. There are three people frantically discussing something, at one workspace. The laptops at one of the other workspaces is unlocked. You might be able to have a quick peek at it, before someone notices you."
                $Script:State.NetworkDistraction = $true
                $interactableData.Remove("PullCables")
                $Script:MachineState = "Running"
            }
            elseif ($ServerRackOptions.$PlayerInput.MenuDescription -eq "Pull the power cord for the main power strip.") {
                $Script:ActionMessage = $ServerRackOptions.$PlayerInput.ActionMessage
                $World.'515351'.RoomDescription = "Workspaces, six of them. There are three people frantically discussing something, at one workspace. The laptops at one of the other workspaces is unlocked. You might be able to have a quick peek at it, before someone notices you."
                $interactableData.Remove("PullPower")
                $Script:MachineState = "Running"
            }
            elseif ($ServerRackOptions.$PlayerInput.MenuDescription -eq "Leave the server rack alone.") {
                $Script:ActionMessage = $ServerRackOptions.$PlayerInput.ActionMessage
                $Script:MachineState = "Completed"
            } 
        }
        else {
            $Script:ActionMessage = "Invalid choice. Try again"
            $Script:MachineState = "Running"
        }
    }
}