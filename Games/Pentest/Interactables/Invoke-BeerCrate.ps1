function Invoke-BeerCrate {
    <#
    .SYNOPSIS
        Starts the interactable Beer Crate.
        
    .DESCRIPTION
        Starts the interactable Beer Crate. This crate offers the opportunity to place an empty bottle inside it, to earn
        the achievement "Office cleanup".
    #>

    # Import machine data from file.
    $InteractableData = Get-Content "$PSScriptRoot\BeerCrate.json" | ConvertFrom-Json -AsHashtable
    
    # Write header to screen.
    Show-Header

    # Write map to screen, if enabled.
    if ($MapStyle) {
        Show-Map -MapStyle $MapStyle
    }
    
    # Write previous action to screen, if any.
    if ($ActionMessage) {
        Write-WordWrapHost $ActionMessage -Color Green
        if (!$CompletedAchievement) { Write-Host } # Skip this empty line when an achievement is completed, it looks better that way.
    }
    # Write room title to screen.
    Write-Host "[$($World."$($State.CurrentRoom)".RoomTitle)]" -BackgroundColor White -ForegroundColor Black
    Write-Host
    
    # Write room description to screen.
    Write-WordWrapHost "$($World."$($State.CurrentRoom)".RoomDescription)"

    # Write exits to screen.
    Show-Exits

    # Take inventory of all the options at the beer crate rack.
    if ($State.Inventory -notcontains "An empty beer bottle") {
        $InteractableData.Remove('CleanUp')
    }

    $BeerCrateOptions = @{}
    $i = 1
    foreach ($Option in $InteractableData.Keys) {
        $BeerCrateOptions.$i = $InteractableData.$Option
        $i++
    }
    


    ####################################
    # Write interactable specific actions to screen.
    Write-WordWrapHost "So... what now?" -Color Magenta
    Write-Host

    foreach ($Number in $BeerCrateOptions.Keys | Sort-Object) {
        Write-Host "$Number`: $($BeerCrateOptions.$Number.MenuDescription)"
    }
    write-host

    # Read player action.
    $PlayerInput = Read-Host "What would you like to do?"

    # Process player action.
    if ((@(1..9) -contains $PlayerInput -and $PlayerInput -le $BeerCrateOptions.Count)) {
        if ($BeerCrateOptions[$PlayerInput].MenuDescription -eq "Leave the rack alone.") {
            $Script:ActionMessage = $BeerCrateOptions.$PlayerInput.ActionMessage
            $Script:MachineState = "Completed"
        }
        elseif ($BeerCrateOptions[$PlayerInput].MenuDescription -eq "Count the bottles.") {
            $Script:ActionMessage = $BeerCrateOptions.$PlayerInput.ActionMessage
            $Script:MachineState = "Running"
        } else {
            #TODO: this gets triggered, figure out why
            write-host "You shouldn't get here" -ForegroundColor Red
            Write-Host "PlayerInput: $PlayerInput"
            Write-Host "Desc: $($BeerCrateOptions.$PlayerInput.MenuDescription)"
            Write-Host "InteractableData: $InteractableData"
            Write-Host "BeerCrateOptions: $BeerCrateOptions"
            $BeerCrateOptions[1].MenuDescription
            Write-Host "BeerCrateOptions.PlayerInput: $($BeerCrateOptions.$PlayerInput)"
            pause
        }
    }
    elseif ($BeerCrateOptions.$PlayerInput.MenuDescription -eq "Put the empty bottle you found in the crate.") {
        $Script:ActionMessage = $BeerCrateOptions.$PlayerInput.ActionMessage
        $Script:MachineState = "Running"
        # Take the empty beer bottle from inventory and complete the achievement World improver.
        $State.Inventory = $State.Inventory | Where-Object { $_ -ne "An empty beer bottle" }
        Invoke-CompleteAchievement -AchievementName "World improver"
    }

    else {
        $Script:ActionMessage = "Invalid choice. Try again"
        $Script:MachineState = "Running"
    }
}
