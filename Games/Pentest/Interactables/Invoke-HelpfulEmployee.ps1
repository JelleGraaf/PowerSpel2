function Invoke-HelpfulEmployee {
    <#
    .SYNOPSIS
        Adds a helpful employee to the room, who can help the player move through a locked door

    .DESCRIPTION
        Adds a helpful employee to the room, who can help the player move through the locked door to the south of room 504951.
        After this has been done, the door will still be locked and the player will need to find a key card to get back to 504491.
    #>

    # Import machine data from file.
    $InteractableData = Get-Content "$PSScriptRoot\HelpfulEmployee.json" | ConvertFrom-Json -AsHashtable
    
    # Write header to screen.
    Show-Header

    # Write map to screen, if enabled.
    if ($MapStyle) {
        Show-Map -MapStyle $MapStyle
    }
        
    # Write previous action to screen, if any.
    if ($ActionMessage) {
        Write-WordWrapHost $ActionMessage -Color Green
        if (!$CompletedAchievement) { Write-Host } # Skip this empty line when an achievement is completed, it looks better that way.
    }
    # Write room title to screen.
    Write-Host "[$($World."$($State.CurrentRoom)".RoomTitle)]" -BackgroundColor White -ForegroundColor Black
    Write-Host
        
    # Write room description to screen.
    Write-WordWrapHost "$($World."$($State.CurrentRoom)".RoomDescription)"
    
    # Write exits to screen.
    Show-Exits
    
    # Ready all menu options
    $HelpfulEmployeeOptions = @{}
    $i = 1
    foreach ($Option in $InteractableData.Keys) {
        $HelpfulEmployeeOptions.$i = $InteractableData.$Option
        $i++
    }

        ####################################
    # Write interactable specific actions to screen.
    Write-WordWrapHost "So... what now?" -Color Magenta
    Write-Host

    foreach ($Number in $HelpfulEmployeeOptions.Keys | Sort-Object) {
        Write-Host "$Number`: $($HelpfulEmployeeOptions.$Number.MenuDescription)"
    }
    Write-Host

    # Read player action.
    $PlayerInput = $null
    while (('1','2','3','4','5','6','7','8','9') -notcontains $PlayerInput) {
        $PlayerInput = Read-Host "What would you like to do?"
    }
    [int]$PlayerInput = $PlayerInput

    # Process player action.
    if ((@(1..9) -contains $PlayerInput -and $PlayerInput -le $HelpfulEmployeeOptions.Count)) {
        if ($HelpfulEmployeeOptions.$PlayerInput.MenuDescription -eq "Walk along with the employee through the southern door.") {
            $Script:ActionMessage = $HelpfulEmployeeOptions.$PlayerInput.ActionMessage
            [int]$State.CurrentRoom = '504851'
            $Script:MachineState = "Completed"
        }
        elseif ($HelpfulEmployeeOptions.$PlayerInput.MenuDescription -eq "Don't walk along with the employee.") {
            $Script:ActionMessage = $HelpfulEmployeeOptions.$PlayerInput.ActionMessage
            $Script:MachineState = "Completed"
        } 
    }
    else {
        $Script:ActionMessage = "Invalid choice. Try again"
        $Script:MachineState = "Running"
    }
}
