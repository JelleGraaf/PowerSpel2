function Invoke-ArcadeMachine {
    <#
    .SYNOPSIS
        Starts the interactable ArcadeMachine.
        
    .DESCRIPTION
        Starts the interactable ArcadeMachine. This gives you access to several minigames.
    #>

    # Import machine data from file.
    $InteractableData = Get-Content "$PSScriptRoot\ArcadeMachine.json" | ConvertFrom-Json -AsHashtable
    
    # Write header to screen.
    Show-Header

    # Write map to screen, if enabled.
    if ($MapStyle) {
        Show-Map -MapStyle $MapStyle
    }
    
    # Write previous action to screen, if any.
    if ($ActionMessage) {
        Write-WordWrapHost $ActionMessage -Color Green
        if (!$CompletedAchievement) { Write-Host } # Skip this empty line when an achievement is completed, it looks better that way.
    }
    # Write room title to screen.
    Write-Host "[$($World."$($State.CurrentRoom)".RoomTitle)]" -BackgroundColor White -ForegroundColor Black
    Write-Host
    
    # Write room description to screen.
    Write-WordWrapHost "$($World."$($State.CurrentRoom)".RoomDescription)"

    # Write exits to screen.
    Show-Exits

    # Take inventory of all the options at the beer crate rack.
    if ($State.Inventory -notcontains "An empty beer bottle") {
        $InteractableData.Remove('CleanUp')
    }

    $ArcadeGameOptions = @{}
    $i = 1
    foreach ($Option in $InteractableData.Keys) {
        $ArcadeGameOptions.$i = $InteractableData.$Option
        $i++
    }
    
    # Write interactable specific actions to screen.
    Write-WordWrapHost "What game would you like to play?" -Color Magenta
    Write-Host

    foreach ($Number in $ArcadeGameOptions.Keys | Sort-Object) {
        Write-Host "$Number`: $($ArcadeGameOptions.$Number.MenuDescription)"
    }
    write-host

    # Read player action.
    $PlayerInput = $null
    while (('1','2','3','4','5','6','7','8','9') -notcontains $PlayerInput) {
        $PlayerInput = Read-Host "What would you like to do?"
    }
    [int]$PlayerInput = $PlayerInput

    # Process player action.
    if ((@(1..9) -contains $PlayerInput -and $PlayerInput -le $ArcadeGameOptions.Count)) {
        if ($ArcadeGameOptions.$PlayerInput.MenuDescription -eq "Leave the arcade machine be.") {
            $Script:ActionMessage = $ArcadeGameOptions.$PlayerInput.ActionMessage
            $Script:MachineState = "Completed"
        }
        elseif ($ArcadeGameOptions.$PlayerInput.MenuDescription -eq "Play Escape the House.") {
            Invoke-PlayEscapeTheHouse
            $Script:ActionMessage = $ArcadeGameOptions.$PlayerInput.ActionMessage
            $Script:MachineState = "Completed"
        } 
        elseif ($ArcadeGameOptions.$PlayerInput.MenuDescription -eq "Play Bejeweled.") {
            Invoke-PlayBejeweled
            $Script:ActionMessage = $ArcadeGameOptions.$PlayerInput.ActionMessage
            $Script:MachineState = "Completed"
        } 
        elseif ($ArcadeGameOptions.$PlayerInput.MenuDescription -eq "Play the Pirate Number Guessing Game.") {
            Invoke-PlayPirateNumberGuessing
            $Script:ActionMessage = $ArcadeGameOptions.$PlayerInput.ActionMessage
            $Script:MachineState = "Completed"
        } 
    }
    else {
        $Script:ActionMessage = "Invalid choice. Try again"
        $Script:MachineState = "Running"
    }
}